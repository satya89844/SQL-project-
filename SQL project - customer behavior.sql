create database online_retailer

CREATE TABLE Sales (
    userid INT,
    created_date DATE,
    product_id INT
);
INSERT INTO Sales (userid, created_date, product_id) VALUES
(1, '2017-04-19', 2),
(3, '2019-12-18', 1),
(2, '2020-07-20', 3),
(3, '2019-10-23', 2),
(1, '2018-03-19', 3),
(3, '2016-12-20', 2),
(1, '2016-11-09', 1),
(1, '2016-05-20', 3),
(2, '2017-09-24', 1),
(1, '2016-03-11', 2),
(1, '2016-03-11', 1),
(3, '2016-11-10', 1),
(3, '2017-12-07', 1),
(3, '2016-12-15', 2),
(2, '2017-11-08', 2),
(3, '2018-09-10', 1),
(1, '2019-05-01', 3),
(5, '2018-11-23', 3),
(6, '2017-06-30', 9),
(7, '2018-08-12', 8),
(8, '2019-03-19', 7),
(9, '2017-12-04', 6),
(10, '2017-09-22', 8),
(4, '2020-08-17', 1),
(5, '2017-05-12', 10),
(6, '2014-01-27', 11),
(7, '2014-04-02', 7),
(8, '2020-12-15', 8),
(9, '2017-09-08', 8);


CREATE TABLE Product (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    price INT
);

INSERT INTO Product (product_id, product_name, price) VALUES
(1, 'Dal Makani', 160),
(2, 'Shahi Panner', 170),
(3, 'Butter Chicken', 340),
(4, 'Aloo Gobi', 150),
(5, 'Chole Bhature', 100),
(6, 'Fish Curry', 380),
(7, 'Chicken Tikka', 300),
(8, 'Mutton Biryani', 450),
(9, 'Veg Pulao', 200),
(10, 'Mango Lassi', 80),
(11, 'Gulab Jamun', 100);


CREATE TABLE User_name (
    userid INT PRIMARY KEY,
    Names VARCHAR(50)
);

INSERT INTO User_name (userid, Names) VALUES
(1, 'Anshul'),
(2, 'Rohan'),
(3, 'Shreya'),
(4, 'Priya'),
(5, 'Aryan'),
(6, 'Sara'),
(7, 'Sahil'),
(8, 'Tanvi'),
(9, 'Ritika'),
(10, 'Gaurav');

CREATE TABLE Users (
    userid INT PRIMARY KEY,
    signup_date DATE
);

INSERT INTO Users (userid, signup_date) VALUES
(1, '2014-09-02'),
(2, '2015-01-15'),
(3, '2014-04-11'),
(4, '2015-11-17'),
(10, '2016-01-02'),
(9, '2016-01-02'),
(7, '2013-04-02'),
(8, '2013-12-15'),
(5, '2015-09-08'),
(6, '2014-07-13');

CREATE TABLE Golduser_Signup (
    userid INT PRIMARY KEY,
    signup_date DATE
);

INSERT INTO Golduser_Signup (userid, signup_date) VALUES
(1, '2014-09-02'),
(2, '2015-01-15'),
(3, '2014-04-11'),
(4, '2015-11-17'),
(10, '2016-01-02'),
(9, '2016-01-02'),
(7, '2013-04-02'),
(8, '2013-12-15'),
(5, '2015-09-08'),
(6, '2014-07-13');

-- the total sales revenue generated by each product
SELECT 
    p.product_id,
    p.product_name,
    SUM(p.price) AS total_revenue
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_revenue DESC;

--3 product has the highest sales revenue
SELECT TOP 3
    p.product_id,
    p.product_name,
    SUM(p.price) AS total_revenue
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_revenue DESC;


--users have signed up for the service and has taken the gold membership
SELECT COUNT(DISTINCT u.userid) AS total_gold_members
FROM Users u
JOIN Golduser_Signup g ON u.userid = g.userid;

 --What is the revenue generated from gold users?
 SELECT 
    SUM(p.price) AS gold_users_revenue
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
JOIN Golduser_Signup g ON s.userid = g.userid;


--What is the total revenue generated from gold users?
SELECT 
    SUM(p.price) AS total_gold_users_revenue
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
JOIN Golduser_Signup g ON s.userid = g.userid;

--Which users has been a gold user for the How much of time
SELECT 
    g.userid, 
    DATEDIFF(YEAR, g.signup_date, GETDATE()) AS years_as_gold_member,
    DATEDIFF(MONTH, g.signup_date, GETDATE()) % 12 AS months_as_gold_member,
    DATEDIFF(DAY, g.signup_date, GETDATE()) % 30 AS days_as_gold_member
FROM Golduser_Signup g;


--What is the most popular product among gold users
SELECT TOP 1 
    p.product_name, 
    COUNT(s.product_id) AS purchase_count
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
JOIN Golduser_Signup g ON s.userid = g.userid
GROUP BY p.product_name
ORDER BY purchase_count DESC;

--What is the total sales revenue generated in each year
SELECT 
    YEAR(s.created_date) AS sales_year,
    SUM(p.price) AS total_revenue
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY YEAR(s.created_date)
ORDER BY sales_year;


 --How has the sales revenue changed over the years?
 WITH YearlyRevenue AS (
    SELECT 
        YEAR(s.created_date) AS sales_year,
        SUM(p.price) AS total_revenue
    FROM Sales s
    JOIN Product p ON s.product_id = p.product_id
    GROUP BY YEAR(s.created_date)
)
SELECT 
    y1.sales_year, 
    y1.total_revenue,
    LAG(y1.total_revenue) OVER (ORDER BY y1.sales_year) AS prev_year_revenue,
    CASE 
        WHEN LAG(y1.total_revenue) OVER (ORDER BY y1.sales_year) IS NULL THEN NULL
        ELSE 
            ROUND(
                ((y1.total_revenue - LAG(y1.total_revenue) OVER (ORDER BY y1.sales_year)) * 100.0) 
                / LAG(y1.total_revenue) OVER (ORDER BY y1.sales_year), 2
            )
    END AS revenue_change_percentage
FROM YearlyRevenue y1
ORDER BY y1.sales_year;

-- What is the average Gold-signup compare to just sign up for the users?
	SELECT 
    (SELECT COUNT(userid) FROM Golduser_Signup) AS gold_signups,
    (SELECT COUNT(userid) FROM Users) AS total_signups,
    ROUND(
        (SELECT COUNT(userid) FROM Golduser_Signup) * 100.0 / 
        (SELECT COUNT(userid) FROM Users), 2
    ) AS gold_signup_percentage

--How many gold members users have order how many numbers of time ?

SELECT 
    g.userid, 
    COUNT(s.product_id) AS total_orders
FROM Sales s
JOIN Golduser_Signup g ON s.userid = g.userid
GROUP BY g.userid
ORDER BY total_orders DESC;


--What is the total amount each customer spend on Online Food Delivery
SELECT 
    s.userid, 
    SUM(p.price) AS total_spent
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY s.userid
ORDER BY total_spent DESC;

--What is the frequency of customer visits to the online platform?
SELECT 
    s.userid, 
    COUNT(s.created_date) AS visit_frequency
FROM Sales s
GROUP BY s.userid
ORDER BY visit_frequency DESC;


--What was the first order purchase by each customer 
WITH FirstOrder AS (
    SELECT 
        s.userid, 
        MIN(s.created_date) AS first_order_date
    FROM Sales s
    GROUP BY s.userid
)
SELECT 
    f.userid, 
    f.first_order_date, 
    s.product_id, 
    p.product_name
FROM FirstOrder f
JOIN Sales s ON f.userid = s.userid AND f.first_order_date = s.created_date
JOIN Product p ON s.product_id = p.product_id
ORDER BY f.userid;


--What is the most purchase item on the menu and how many times was it purchased by all customers?
SELECT TOP 1 
    p.product_name, 
    COUNT(s.product_id) AS purchase_count
FROM Sales s
JOIN Product p ON s.product_id = p.product_id
GROUP BY p.product_name
ORDER BY purchase_count DESC;

--Which item was most popular for each customer ?
WITH RankedOrders AS (
    SELECT 
        s.userid, 
        p.product_name, 
        COUNT(s.product_id) AS order_count,
        RANK() OVER (PARTITION BY s.userid ORDER BY COUNT(s.product_id) DESC) AS rank_order
    FROM Sales s
    JOIN Product p ON s.product_id = p.product_id
    GROUP BY s.userid, p.product_name
)
SELECT 
    userid, 
    product_name, 
    order_count
FROM RankedOrders
WHERE rank_order = 1
ORDER BY userid;


--Which item was purchase first by the customer after they become a member ?
WITH FirstGoldPurchase AS (
    SELECT 
        gs.userid, 
        MIN(s.created_date) AS first_purchase_date
    FROM Sales s
    JOIN golduser_signup gs ON s.userid = gs.userid  -- Check correct table name
    WHERE s.created_date >= gs.signup_date
    GROUP BY gs.userid
)
SELECT 
    fgp.userid, 
    fgp.first_purchase_date, 
    p.product_name
FROM FirstGoldPurchase fgp
JOIN Sales s ON fgp.userid = s.userid AND fgp.first_purchase_date = s.created_date
JOIN Product p ON s.product_id = p.product_id
ORDER BY fgp.userid;

--Which item was purchase before the customer become a member 
WITH LastPurchaseBeforeMembership AS (
    SELECT 
        s.userid, 
        MAX(s.created_date) AS last_purchase_date
    FROM Sales s
    JOIN Golduser_Signup gs ON s.userid = gs.userid
    WHERE s.created_date < gs.signup_date  -- Only purchases BEFORE signup
    GROUP BY s.userid
)
SELECT 
    lp.userid, 
    lp.last_purchase_date, 
    p.product_name
FROM LastPurchaseBeforeMembership lp
JOIN Sales s ON lp.userid = s.userid AND lp.last_purchase_date = s.created_date
JOIN Product p ON s.product_id = p.product_id
ORDER BY lp.userid;

--What is the total orders and amount spent for each member before they become a member
SELECT 
    s.userid, 
    COUNT(s.userid) AS total_orders,  -- Count total orders before membership
    SUM(p.price) AS total_amount_spent  -- Sum total spending before membership
FROM Sales s
JOIN Golduser_Signup gs ON s.userid = gs.userid
JOIN Product p ON s.product_id = p.product_id
WHERE s.created_date < gs.signup_date  -- Only purchases BEFORE signup
GROUP BY s.userid
ORDER BY total_amount_spent DESC;

/*Rank all the transactions for each member whenever they are
a XYZ gold member for every non gold member Transaction marks
as na */

SELECT 
    s.userid, 
    s.product_id, 
    s.created_date, 
    p.product_name, 
    CASE 
        WHEN s.created_date >= gs.signup_date THEN 
            DENSE_RANK() OVER (PARTITION BY s.userid ORDER BY s.created_date)
        ELSE NULL
    END AS transaction_rank  -- NULL instead of 'NA'
FROM Sales s
LEFT JOIN Golduser_Signup gs ON s.userid = gs.userid
JOIN Product p ON s.product_id = p.product_id
ORDER BY s.userid, s.created_date;



